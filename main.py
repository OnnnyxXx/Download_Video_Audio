import asyncio
import os
import random
from aiogram import types, F
from aiogram.types import InputFile, FSInputFile, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pytube import YouTube
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart
import logging

token = '6136167557:AAHEohAi6jN0yQERVRuUp6AdaGKi3StxoYU'
bot = Bot(token)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
builder = InlineKeyboardBuilder()
builder.add(InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å –ê—É–¥–∏–æ", callback_data="download_audio"))
builder.add(InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å –í–∏–¥–µ–æ", callback_data="download_video"))
keyboard = builder.as_markup()


@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    """
    –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏.

    –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å GIF.....

    """
    gif_file_funny = FSInputFile("hello_user/kiss-lip-kiss.gif")
    # ....
    # builder = InlineKeyboardBuilder()
    # builder.add(types.InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å –ê—É–¥–∏–æ", callback_data="download_audio"))
    # builder.add(types.InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å –í–∏–¥–µ–æ", callback_data="download_video"))
    # .....
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!')
    await bot.send_animation(chat_id=message.chat.id, animation=gif_file_funny, reply_markup=keyboard)


user_data = {}  # –•—Ä–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ type, audio or video


@dp.callback_query(lambda c: c.data == "download_audio")
async def get_link_audio(callback_query: types.CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ user –Ω–∞–∂–∞–ª –Ω–∞ download_audio –≤ def cmd_start.
    """
    user_data[callback_query.from_user.id] = {'type': 'audio'}
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ.")


@dp.callback_query(lambda c: c.data == "download_video")
async def get_link_video(callback_query: types.CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ user –Ω–∞–∂–∞–ª –Ω–∞ download_video –≤ def cmd_start.
    –¢–∞–∫-–∂–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º type –≤ user_data
    """
    user_data[callback_query.from_user.id] = {'type': 'video'}
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.")


@dp.message()
async def save_link_and_download(message: types.Message):
    """
    –ü–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø –∏ —Å—Å—ã–ª–∫—É –≤ def –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª–∏–±–æ –∞—É–¥–∏–æ –ª–∏–±–æ –≤–∏–¥–µ–æ.
    –ò –Ω–∞—á–µ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ –µ–º—É –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å.
    """
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")

    user_data[user_id]['url'] = message.text
    if user_data[user_id]['type'] == 'audio':
        await download_audio(message, user_data[user_id]['url'])
    elif user_data[user_id]['type'] == 'video':
        await download_video(message, user_data[user_id]['url'])


async def download_audio(message: types.Message, audio_url: str):
    """
    –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Å –≤–∏–¥–µ–æ —Ä–æ–ª–∏–∫–∞ –¢–û–õ–¨–ö–û YOUTUBE.
    –¢—É—Ç —à—É—Ç–∫–∏ –∏ –ø—Ä–∏–∫–æ–ª—ã –≤ —Å—Ç–æ—Ä–æ–Ω—É user, —á—Ç–æ –±—ã —Å–∫—É—á–Ω–æ –Ω–µ –±—ã–ª–æ )
    """
    try:
        await message.answer('–í–û–û–£–£–£, —è –ø–æ—Å–º–æ—Ç—Ä–µ–ª —á—Ç–æ —Ç–∞–º, –ø–æ—ç—Ç–æ–º—É —è..')
        link_audio = YouTube(audio_url)
        stream = link_audio.streams.filter(only_audio=True).first()
        if stream:
            await message.answer('–í—ã–∑—ã–≤–∞—é –ø–æ–ª–∏—Ü–∏—é –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å! üöîüö®')
            audio_filename = f"{link_audio.title}.mp3"
            audio_path = f"–ê—É–¥–∏–æ/{audio_filename}"
            await asyncio.sleep(3)

            await message.answer('–õ–∞–¥–Ω–æ, –®—É—Ç–∫–∞ ), –∫—Å—Ç–∞ ‚Üì ')
            stream.download(output_path='–ê—É–¥–∏–æ/', filename=audio_filename)

            await message.answer('–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ')

            await asyncio.sleep(3)

            await message.answer("–í—à–∏–≤–∞—é –º–∞–π–Ω–µ—ÄüëÄ")

            audio_file_input = FSInputFile(audio_path)

            chat_id = message.chat.id

            await bot.send_audio(chat_id=chat_id, audio=audio_file_input, caption="–í–∞—à–µ –∞—É–¥–∏–æ, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è")
            await bot.send_sticker(
                message.from_user.id,
                sticker="CAACAgEAAxkBAAEGUTxmdT8I9Yg45FEFesy3wRfQOfu1cAACYwADwKwII3myhHDslxHDNQQ")

            os.remove(audio_path)

            await message.answer(
                '–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú–æ–∂–µ—Ç —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ?',
                reply_markup=keyboard)
        else:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫.')
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")


# ///////////////////////////////////////////////////

async def download_video(message: types.Message, video_url: str):
    """
    –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —Ä–æ–ª–∏–∫ –¢–û–õ–¨–ö–û YOUTUBE.
    –¢—É—Ç —à—É—Ç–∫–∏ –∏ –ø—Ä–∏–∫–æ–ª—ã –≤ —Å—Ç–æ—Ä–æ–Ω—É user, —á—Ç–æ –±—ã —Å–∫—É—á–Ω–æ –Ω–µ –±—ã–ª–æ )
    """
    try:
        await message.answer('–°–µ—Ä—å—ë–∑–Ω–æ, —Ç—ã –µ—â—ë —ç—Ç–æ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ö–æ—á–µ—à—å')
        await asyncio.sleep(3)

        await bot.send_sticker(
            message.from_user.id,
            sticker="CAACAgIAAxkBAAEGUSxmdT0kAVXqpzyMcd9UarhSI4tpQAAC9gQAAhnydRtt4ksfOtJBXTUE")

        link_video = YouTube(video_url)
        stream = link_video.streams.get_highest_resolution()

        if stream:

            video_path = f'–í–∏–¥–µ–æ/{link_video.title}'
            stream.download(output_path='–í–∏–¥–µ–æ/', filename=link_video.title)
            await message.answer('–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ')

            await asyncio.sleep(3)

            await message.answer("–í—à–∏–≤–∞—é –º–∞–π–Ω–µ—ÄüëÄ")

            video_file_input = FSInputFile(video_path)

            chat_id = message.chat.id
            await bot.send_video(chat_id=chat_id, video=video_file_input, caption="–í–∞—à–µ –≤–∏–¥–µ–æ.")

            os.remove(video_path)
            await message.answer('–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –∏–¥–∏ –æ—Ç —Å—é–¥–∞ :)', reply_markup=keyboard)
        else:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫.')

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")


async def main():
    """
    –ü–µ—Ä–µ–¥–∞–µ–º bot –≤ dp -> Dispatcher() 14 —Å—Ç—Ä–æ–∫–∞.
    """
    await dp.start_polling(bot)


if __name__ == "__main__":
    """–ó–∞–ø—É—Å–∫–∞–µ–º main –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ )"""
    asyncio.run(main())
